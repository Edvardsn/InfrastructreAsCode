name: deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # Arbituary version that is LTS.
    runs-on: ubuntu-20.04
    environment: skytjenester-H23

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    # # Builds and pushes the docker image to the Docker Hub
    # - name: Build and push Docker image
          
    #   run: |
    #     docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_ACCESS_TOKEN}}

    #     docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}

    #     docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:latest

    # # Google cloud authenticaiton
    # - name: Set up Google Cloud SDK
    #   uses: google-github-actions/setup-gcloud@v1
    #   with:
    #     service_account_key: ${{secrets.GOOGLE_CREDENTIALS}}
    #     project_id: skytjenester

    # Terraform 
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    # - name: Set up SSH public key
    #   run: TF_VAR_SSH_PUB_KEY=${{vars.SSH_PUB_KEY}} 

    # - name: Set up Google credentials
    #   run: export TF_VAR_AUTH="${{secrets.GOOGLE_CREDENTIALS}}"


    # - name: Set up Logging
    #   run: TF_LOG=trace

    # create the resources
    - name: Initialize enviroment varaibles
      run: | 
       export GOOGLE_CLOUD_KEYFILE_JSON=${{secrets.GOOGLE_CREDENTIALS}}

    # create the resources
    - name: terraform plan
      run: | 
       echo "planning will now start"
       terraform plan -var "${{vars.ssh_pub_key}}"

    # Create the resources
    - name: Terraform Apply
      run: | 
       echo Applying 
       terraform apply -auto-approve
       echo Applied

    # Retrives the IP from the VM as it is ephemeral this is done after the terraform process
    - name: Get the VM IP Address
      id: get-vm-ip
      run: |
        VM_IP=$(gcloud compute instances describe skytjenester-vm --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
        echo "VM_IP=$VM_IP" >> $GITHUB_ENV

    # Runs the new application version
    - name: SSH and run the new application
      run: |
        ssh -i ${{secrets.SSH_PRIVATE_KEY}} admin@${{vars.VM_IP}}
        
        sudo apt update
        sudo apt install -y docker.io
        sudo systemctl start docker
        sudo systemctl enable docker

        sudo docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{vars.DOCKER_ACCESS_TOKEN}}
        sudo docker pull ${{secrets.DOCKER_USERNAME}}/${{vars.DOCKER_IMAGE_NAME}}:latest
        sudo docker run -p 5000:5000 -e WEBSERVER_PORT=5000 ${{secrets.DOCKER_USERNAME}}/${{vars.DOCKER_IMAGE_NAME}}
